1. 分析需求
2. 编写代码
3. 编写单元测试
4. 自测
5. 编写接口文档
6. 提测代码


1. 发送短信服务

容联云  云通讯
www.yuntongxun.com

2. redis文档
http://redis-py.readthedocs.io/en/latest/#indices-and-tables
http://redisdoc.com/index.html


3. 图片服务

1）保存到程序本地，扩容（磁盘满的问题）
2）备份的问题
3）多机存储的问题
4） 用户A    图片A
    用户B    图片B
    图片A 与 图片B 是同一张图片，会保存两次，浪费空间

5）用户A     a.jpg
   用户B     a.jpg
   同名图片，但不是同一张，后上传的会覆盖掉之前的内容


文件存储解决方案：
1） 自己搭建文件存储系统   FastDFS  快速分布式文件存储系统   HDFS  Hadoop分布式文件系统
2） 选择第三方服务   七牛云存储   www.qiniu.com


4. 前端js模板 art-template
https://aui.github.io/art-template/zh-cn/index.html

5. 数据库优化：

a. 表结构设计  扩展  查询的快慢
    三范式  https://www.zhihu.com/question/24696366
    设计的时候就考虑可能会用到的查询，为方便查询而设计，比如用空间换时间，适当增加冗余字段节省查询开销

b. 建索引   主键  唯一(unique)  索引(key   index)  （外键）
    http://www.jianshu.com/p/2b541c028157
    提升 查询速度  复合索引  where k1     k2   k3  k4
    降低   增删改

c. sql语句优化
    使用索引 注意关键字顺序 最左原则  where

    不要select *

    能使用联合查询，不使用嵌套（子查询）

    select  from tbl_a a inner join tbl_b b on a.field=b.filed where b.=

    select from tbl_a where filed=(select field from tbl_b where b.=)

    能不使用联合查询，尽量不用联合查询

    外键 cascade 级联 （维护外键有额外开销，影响性能）  数据量大的时候，不再使用外键

    使用分析工具分析效率低的sql语句   慢查询工具
    https://flyerboy.github.io/2016/12/23/mysql_slow/
    https://yemengying.com/2016/05/24/mysql-tuning/

d. 缓存
    redis memcached

e. 读写分离
    主从热备份       主（写   增删改）  从（查）

f. 分库分表  水平分库分表
    http://www.infoq.com/cn/articles/key-steps-and-likely-problems-of-split-table


 工作流程
1.  email
2.  git   gitlab  账号   rsa
3.  vpn  虚拟私有网络   阿里云 腾讯云    aws 亚马逊
4. 数据库


公司团队有几个人
我进公司之后负责哪一个业务
公司使用的技术栈



https://moshuqi.github.io/2017/07/20/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8/

码：设 K 为某表中的一个属性或属性组，若除 K 之外的所有属性都完全函数依赖于 K（这个“完全”不要漏了），那么我们称 K 为候选码，简称为码
主属性：包含在任何一个码中的属性成为主属性

2NF：是否存在非主属性对于码的部分函数依赖。若存在，则数据表最高只符合1NF的要求，若不存在，则符合2NF的要求

判断方法：
第一步：找出数据表中所有的码。
第二步：根据第一步所得到的码，找出所有的主属性。
第三步：数据表中，除去所有的主属性，剩下的就都是非主属性了。
第四步：查看是否存在非主属性对码的部分函数依赖。

这一步完成以后，可以得到，表3的码只有一个，就是（学号、课名）。
第二步：主属性有两个：学号 与 课名
第三步：非主属性有四个：姓名、系名、系主任、分数
第四步：
对于（学号，课名） → 姓名，有 学号 → 姓名，存在非主属性 姓名 对码（学号，课名）的部分函数依赖。
对于（学号，课名） → 系名，有 学号 → 系名，存在非主属性 系名 对码（学号，课名）的部分函数依赖。
对于（学号，课名） → 系主任，有 学号 → 系主任，存在非主属性  对码（学号，课名）的部分函数依赖。


第三范式（3NF） 3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖。也就是说， 如果存在非主属性对于码的传递函数依赖，则不符合3NF的要求。

由此可见，符合3NF要求的数据库设计，基本上解决了数据冗余过大，插入异常，修改异常，删除异常的问题。当然，在实际中，往往为了性能上或者应对扩展的需要，经常 做到2NF或者1NF，但是作为数据库设计人员，至少应该知道，3NF的要求是怎样的。


